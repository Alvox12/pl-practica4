
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Sun Apr 28 21:50:39 CEST 2019
//----------------------------------------------------

package constructorast;

import ast.*;
import alex.*;
import errors.*;
import java_cup.runtime.*;

/** CUP v0.11b beta 20140220 generated parser.
  * @version Sun Apr 28 21:50:39 CEST 2019
  */
public class ConstructorAST extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public ConstructorAST() {super();}

  /** Constructor which sets the default scanner. */
  public ConstructorAST(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ConstructorAST(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\043\000\002\002\003\000\002\002\004\000\002\003" +
    "\005\000\002\004\005\000\002\004\003\000\002\005\004" +
    "\000\002\005\004\000\002\006\005\000\002\006\003\000" +
    "\002\007\005\000\002\010\005\000\002\010\005\000\002" +
    "\010\003\000\002\011\005\000\002\011\005\000\002\011" +
    "\003\000\002\012\005\000\002\012\005\000\002\012\005" +
    "\000\002\012\005\000\002\012\005\000\002\012\005\000" +
    "\002\012\003\000\002\013\005\000\002\013\005\000\002" +
    "\013\003\000\002\014\004\000\002\014\004\000\002\014" +
    "\003\000\002\015\003\000\002\015\003\000\002\015\003" +
    "\000\002\015\003\000\002\015\003\000\002\015\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\075\000\006\031\004\032\007\001\002\000\004\004" +
    "\077\001\002\000\006\013\015\027\014\001\002\000\004" +
    "\002\001\001\002\000\004\004\013\001\002\000\006\013" +
    "\ufffd\027\ufffd\001\002\000\004\002\012\001\002\000\004" +
    "\002\000\001\002\000\006\013\ufffb\027\ufffb\001\002\000" +
    "\004\004\020\001\002\000\006\031\004\032\007\001\002" +
    "\000\006\013\ufffe\027\ufffe\001\002\000\006\002\uffff\013" +
    "\075\001\002\000\004\011\022\001\002\000\006\002\ufff9" +
    "\013\ufff9\001\002\000\022\004\027\005\024\006\032\007" +
    "\025\023\035\024\023\033\026\034\030\001\002\000\022" +
    "\004\027\005\024\006\032\007\025\023\035\024\023\033" +
    "\026\034\030\001\002\000\040\002\uffe4\010\uffe4\012\uffe4" +
    "\013\uffe4\014\uffe4\015\uffe4\016\uffe4\017\uffe4\020\uffe4\021" +
    "\uffe4\022\uffe4\024\uffe4\025\uffe4\026\uffe4\030\uffe4\001\002" +
    "\000\022\004\027\005\024\006\032\007\025\023\035\024" +
    "\023\033\026\034\030\001\002\000\040\002\uffe1\010\uffe1" +
    "\012\uffe1\013\uffe1\014\uffe1\015\uffe1\016\uffe1\017\uffe1\020" +
    "\uffe1\021\uffe1\022\uffe1\024\uffe1\025\uffe1\026\uffe1\030\uffe1" +
    "\001\002\000\040\002\uffe2\010\uffe2\012\uffe2\013\uffe2\014" +
    "\uffe2\015\uffe2\016\uffe2\017\uffe2\020\uffe2\021\uffe2\022\uffe2" +
    "\024\uffe2\025\uffe2\026\uffe2\030\uffe2\001\002\000\040\002" +
    "\uffe0\010\uffe0\012\uffe0\013\uffe0\014\uffe0\015\uffe0\016\uffe0" +
    "\017\uffe0\020\uffe0\021\uffe0\022\uffe0\024\uffe0\025\uffe0\026" +
    "\uffe0\030\uffe0\001\002\000\040\002\uffe5\010\uffe5\012\uffe5" +
    "\013\uffe5\014\uffe5\015\uffe5\016\uffe5\017\uffe5\020\uffe5\021" +
    "\uffe5\022\uffe5\024\uffe5\025\uffe5\026\uffe5\030\uffe5\001\002" +
    "\000\040\002\uffe3\010\uffe3\012\uffe3\013\uffe3\014\uffe3\015" +
    "\uffe3\016\uffe3\017\uffe3\020\uffe3\021\uffe3\022\uffe3\024\uffe3" +
    "\025\uffe3\026\uffe3\030\uffe3\001\002\000\040\002\uffe8\010" +
    "\uffe8\012\uffe8\013\uffe8\014\uffe8\015\uffe8\016\uffe8\017\uffe8" +
    "\020\uffe8\021\uffe8\022\uffe8\024\uffe8\025\uffe8\026\uffe8\030" +
    "\uffe8\001\002\000\040\002\uffeb\010\uffeb\012\053\013\uffeb" +
    "\014\061\015\056\016\054\017\055\020\uffeb\021\uffeb\022" +
    "\uffeb\024\uffeb\025\060\026\057\030\052\001\002\000\016" +
    "\004\027\005\024\006\032\007\025\033\026\034\030\001" +
    "\002\000\020\002\ufff2\010\ufff2\013\ufff2\020\ufff2\021\045" +
    "\022\046\024\ufff2\001\002\000\014\002\ufff5\010\ufff5\013" +
    "\ufff5\020\ufff5\024\ufff5\001\002\000\012\002\ufff8\013\ufff8" +
    "\020\041\024\042\001\002\000\022\004\027\005\024\006" +
    "\032\007\025\023\035\024\023\033\026\034\030\001\002" +
    "\000\022\004\027\005\024\006\032\007\025\023\035\024" +
    "\023\033\026\034\030\001\002\000\014\002\ufff6\010\ufff6" +
    "\013\ufff6\020\ufff6\024\ufff6\001\002\000\014\002\ufff7\010" +
    "\ufff7\013\ufff7\020\ufff7\024\ufff7\001\002\000\022\004\027" +
    "\005\024\006\032\007\025\023\035\024\023\033\026\034" +
    "\030\001\002\000\022\004\027\005\024\006\032\007\025" +
    "\023\035\024\023\033\026\034\030\001\002\000\014\002" +
    "\ufff3\010\ufff3\013\ufff3\020\ufff3\024\ufff3\001\002\000\014" +
    "\002\ufff4\010\ufff4\013\ufff4\020\ufff4\024\ufff4\001\002\000" +
    "\040\002\uffe6\010\uffe6\012\uffe6\013\uffe6\014\uffe6\015\uffe6" +
    "\016\uffe6\017\uffe6\020\uffe6\021\uffe6\022\uffe6\024\uffe6\025" +
    "\uffe6\026\uffe6\030\uffe6\001\002\000\022\004\027\005\024" +
    "\006\032\007\025\023\035\024\023\033\026\034\030\001" +
    "\002\000\022\004\027\005\024\006\032\007\025\023\035" +
    "\024\023\033\026\034\030\001\002\000\022\004\027\005" +
    "\024\006\032\007\025\023\035\024\023\033\026\034\030" +
    "\001\002\000\022\004\027\005\024\006\032\007\025\023" +
    "\035\024\023\033\026\034\030\001\002\000\022\004\027" +
    "\005\024\006\032\007\025\023\035\024\023\033\026\034" +
    "\030\001\002\000\022\004\027\005\024\006\032\007\025" +
    "\023\035\024\023\033\026\034\030\001\002\000\022\004" +
    "\027\005\024\006\032\007\025\023\035\024\023\033\026" +
    "\034\030\001\002\000\022\004\027\005\024\006\032\007" +
    "\025\023\035\024\023\033\026\034\030\001\002\000\024" +
    "\002\ufff1\010\ufff1\013\ufff1\020\ufff1\021\ufff1\022\ufff1\024" +
    "\ufff1\025\060\026\057\001\002\000\040\002\uffea\010\uffea" +
    "\012\uffea\013\uffea\014\uffea\015\uffea\016\uffea\017\uffea\020" +
    "\uffea\021\uffea\022\uffea\024\uffea\025\uffea\026\uffea\030\uffea" +
    "\001\002\000\040\002\uffe9\010\uffe9\012\uffe9\013\uffe9\014" +
    "\uffe9\015\uffe9\016\uffe9\017\uffe9\020\uffe9\021\uffe9\022\uffe9" +
    "\024\uffe9\025\uffe9\026\uffe9\030\uffe9\001\002\000\024\002" +
    "\uffef\010\uffef\013\uffef\020\uffef\021\uffef\022\uffef\024\uffef" +
    "\025\060\026\057\001\002\000\024\002\uffee\010\uffee\013" +
    "\uffee\020\uffee\021\uffee\022\uffee\024\uffee\025\060\026\057" +
    "\001\002\000\024\002\ufff0\010\ufff0\013\ufff0\020\ufff0\021" +
    "\ufff0\022\ufff0\024\ufff0\025\060\026\057\001\002\000\024" +
    "\002\uffec\010\uffec\013\uffec\020\uffec\021\uffec\022\uffec\024" +
    "\uffec\025\060\026\057\001\002\000\024\002\uffed\010\uffed" +
    "\013\uffed\020\uffed\021\uffed\022\uffed\024\uffed\025\060\026" +
    "\057\001\002\000\010\010\073\020\041\024\042\001\002" +
    "\000\040\002\uffdf\010\uffdf\012\uffdf\013\uffdf\014\uffdf\015" +
    "\uffdf\016\uffdf\017\uffdf\020\uffdf\021\uffdf\022\uffdf\024\uffdf" +
    "\025\uffdf\026\uffdf\030\uffdf\001\002\000\040\002\uffe7\010" +
    "\uffe7\012\uffe7\013\uffe7\014\uffe7\015\uffe7\016\uffe7\017\uffe7" +
    "\020\uffe7\021\uffe7\022\uffe7\024\uffe7\025\uffe7\026\uffe7\030" +
    "\uffe7\001\002\000\004\004\020\001\002\000\006\002\ufffa" +
    "\013\ufffa\001\002\000\006\013\ufffc\027\ufffc\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\075\000\012\002\010\003\005\004\004\005\007\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\006\016\007\020" +
    "\001\001\000\004\005\015\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\010\037\011\036\012\035\013\033\014\032\015\030\001" +
    "\001\000\006\014\073\015\030\001\001\000\002\001\001" +
    "\000\016\010\071\011\036\012\035\013\033\014\032\015" +
    "\030\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\015\050\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\011" +
    "\043\012\035\013\033\014\032\015\030\001\001\000\014" +
    "\011\042\012\035\013\033\014\032\015\030\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\011\047\012\035" +
    "\013\033\014\032\015\030\001\001\000\012\012\046\013" +
    "\033\014\032\015\030\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\013\070\014\032\015" +
    "\030\001\001\000\010\013\067\014\032\015\030\001\001" +
    "\000\010\013\066\014\032\015\030\001\001\000\010\013" +
    "\065\014\032\015\030\001\001\000\010\013\064\014\032" +
    "\015\030\001\001\000\006\014\063\015\030\001\001\000" +
    "\006\014\062\015\030\001\001\000\010\013\061\014\032" +
    "\015\030\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\007\075" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ConstructorAST$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ConstructorAST$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ConstructorAST$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
   errores = new GestionErrores();
   AnalizadorLexico alex = (AnalizadorLexico)getScanner();
   alex.fijaGestionErrores(errores);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }

 
   private GestionErrores errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$ConstructorAST$actions {


   private AST as = new AST();

  private final ConstructorAST parser;

  /** Constructor */
  CUP$ConstructorAST$actions(ConstructorAST parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ConstructorAST$do_action_part00000000(
    int                        CUP$ConstructorAST$act_num,
    java_cup.runtime.lr_parser CUP$ConstructorAST$parser,
    java.util.Stack            CUP$ConstructorAST$stack,
    int                        CUP$ConstructorAST$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ConstructorAST$result;

      /* select the action based on the action number */
      switch (CUP$ConstructorAST$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Sp ::= S 
            {
              S RESULT =null;
		S aDeterm = (S)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = aDeterm; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Sp",0, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Sp EOF 
            {
              Object RESULT =null;
		S start_val = (S)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		RESULT = start_val;
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$ConstructorAST$parser.done_parsing();
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // S ::= LDs SEPARADOR LD2 
            {
              S RESULT =null;
		LDs aDeexp1 = (LDs)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		LD2 aDeterm = (LD2)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT=new S(aDeexp1,aDeterm); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("S",1, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // LDs ::= LDs PUNTOCOMA D 
            {
              LDs RESULT =null;
		LDs aDeexp1 = (LDs)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		D aDeterm = (D)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT=as.defCompuesta(aDeexp1,aDeterm); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("LDs",2, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // LDs ::= D 
            {
              LDs RESULT =null;
		D aDeterm = (D)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT=as.defSimple(aDeterm); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("LDs",2, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // D ::= NUM IDEN 
            {
              D RESULT =null;
		Object aDeterm = (Object)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT=new D("num", (String)aDeterm); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("D",3, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // D ::= BOOL IDEN 
            {
              D RESULT =null;
		Object aDeterm = (Object)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT=new D("bool", (String)aDeterm); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("D",3, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // LD2 ::= LD2 PUNTOCOMA D2 
            {
              LD2 RESULT =null;
		LD2 aDeexp1 = (LD2)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		D2 aDeterm = (D2)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT=as.cCompuesta(aDeexp1,aDeterm); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("LD2",4, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // LD2 ::= D2 
            {
              LD2 RESULT =null;
		D2 aDeterm = (D2)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT=as.cSimple(aDeterm); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("LD2",4, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // D2 ::= IDEN IGUAL E0 
            {
              D2 RESULT =null;
		Object aDeterm = (Object)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		E aDeexp1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT=new D2((String)aDeterm, aDeexp1); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("D2",5, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // E0 ::= E0 MAS E1 
            {
              E RESULT =null;
		E aDeexp1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		E aDeterm = (E)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT=as.suma(aDeexp1,aDeterm); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E0",6, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // E0 ::= E0 MENOS E1 
            {
              E RESULT =null;
		E aDeexp1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		E aDeterm = (E)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT=as.resta(aDeexp1,aDeterm); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E0",6, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // E0 ::= E1 
            {
              E RESULT =null;
		E aDeterm = (E)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT=aDeterm; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E0",6, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // E1 ::= E2 AND E1 
            {
              E RESULT =null;
		E aDeexp1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		E aDeterm = (E)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT=as.and(aDeexp1,aDeterm); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E1",7, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // E1 ::= E2 OR E2 
            {
              E RESULT =null;
		E aDeexp1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		E aDeterm = (E)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT=as.or(aDeexp1,aDeterm); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E1",7, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // E1 ::= E2 
            {
              E RESULT =null;
		E aDeterm = (E)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT=aDeterm; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E1",7, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // E2 ::= E3 MAYOR E3 
            {
              E RESULT =null;
		E aDeexp1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		E aDeterm = (E)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT=as.mayor(aDeexp1,aDeterm); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E2",8, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // E2 ::= E3 MAYIGUAL E3 
            {
              E RESULT =null;
		E aDeexp1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		E aDeterm = (E)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT=as.mayorIgual(aDeexp1,aDeterm); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E2",8, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // E2 ::= E3 MENOR E3 
            {
              E RESULT =null;
		E aDeexp1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		E aDeterm = (E)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT=as.menor(aDeexp1,aDeterm); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E2",8, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // E2 ::= E3 MENIGUAL E3 
            {
              E RESULT =null;
		E aDeexp1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		E aDeterm = (E)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT=as.menorIgual(aDeexp1,aDeterm); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E2",8, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // E2 ::= E3 DIFERENTE E3 
            {
              E RESULT =null;
		E aDeexp1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		E aDeterm = (E)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT=as.dif(aDeexp1,aDeterm); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E2",8, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // E2 ::= E3 EQUIVALENTE E3 
            {
              E RESULT =null;
		E aDeexp1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		E aDeterm = (E)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT=as.eq(aDeexp1,aDeterm); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E2",8, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // E2 ::= E3 
            {
              E RESULT =null;
		E aDeterm = (E)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT=aDeterm; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E2",8, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // E3 ::= E3 POR E4 
            {
              E RESULT =null;
		E aDeexp1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		E aDeterm = (E)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT=as.mul(aDeexp1,aDeterm); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E3",9, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // E3 ::= E3 DIV E4 
            {
              E RESULT =null;
		E aDeexp1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		E aDeterm = (E)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT=as.div(aDeexp1,aDeterm); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E3",9, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // E3 ::= E4 
            {
              E RESULT =null;
		E aDeterm = (E)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT=aDeterm; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E3",9, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // E4 ::= MENOS E4 
            {
              E RESULT =null;
		E aDeterm = (E)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT=aDeterm; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E4",10, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // E4 ::= NOT E5 
            {
              E RESULT =null;
		E aDeterm = (E)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT=as.not(aDeterm); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E4",10, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // E4 ::= E5 
            {
              E RESULT =null;
		E aDeterm = (E)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT=aDeterm; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E4",10, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // E5 ::= ENT 
            {
              E RESULT =null;
		Object aDeterm = (Object)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT=as.entero((String)aDeterm); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E5",11, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // E5 ::= REAL 
            {
              E RESULT =null;
		Object aDeterm = (Object)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT=as.real((String)aDeterm); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E5",11, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // E5 ::= IDEN 
            {
              E RESULT =null;
		Object aDeterm = (Object)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT=as.id((String)aDeterm); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E5",11, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // E5 ::= TRUE 
            {
              E RESULT =null;
		Object aDeterm = (Object)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT=as.boolTrue((String)aDeterm); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E5",11, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // E5 ::= FALSE 
            {
              E RESULT =null;
		Object aDeterm = (Object)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT=as.boolFalse((String)aDeterm); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E5",11, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // E5 ::= PAP E0 PCIERRE 
            {
              E RESULT =null;
		E aDeexp = (E)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		 RESULT = aDeexp; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E5",11, RESULT);
            }
          return CUP$ConstructorAST$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ConstructorAST$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ConstructorAST$do_action(
    int                        CUP$ConstructorAST$act_num,
    java_cup.runtime.lr_parser CUP$ConstructorAST$parser,
    java.util.Stack            CUP$ConstructorAST$stack,
    int                        CUP$ConstructorAST$top)
    throws java.lang.Exception
    {
              return CUP$ConstructorAST$do_action_part00000000(
                               CUP$ConstructorAST$act_num,
                               CUP$ConstructorAST$parser,
                               CUP$ConstructorAST$stack,
                               CUP$ConstructorAST$top);
    }
}

