/* ConstructorAST.java */
/* Generated By:JavaCC: Do not edit this line. ConstructorAST.java */
package constructorast;

import ast.*;

public class ConstructorAST implements ConstructorASTConstants {
         private AST as = new AST();
         private final static int MAS=0;
         private final static int MENOS=1;
         private final static int POR=2;
         private final static int DIV=3;
         private final static int AND=4;
         private final static int OR=5;
         private final static int NOT=6;
         private final static int MAYOR=7;
         private final static int MENOR=8;
         private final static int MAYORIGUAL=9;
         private final static int MENORIGUAL=10;
         private final static int DIFERENTE=11;
         private final static int EQUIVALENTE=12;

         private E mkexp(int op, E opnd1, E opnd2){
                 switch(op) {
                         case MAS: return as.suma(opnd1,opnd2);
                         case MENOS: return as.resta(opnd1,opnd2);
                         case POR: return as.mul(opnd1,opnd2);
                         case DIV: return as.div(opnd1,opnd2);
                         case AND: return as.and(opnd1,opnd2);
                         case OR: return as.or(opnd1,opnd2);
                         case MAYOR: return as.mayor(opnd1,opnd2);
                         case MENOR: return as.menor(opnd1,opnd2);
                         case MAYORIGUAL: return as.mayorIgual(opnd1,opnd2);
                         case MENORIGUAL: return as.menorIgual(opnd1,opnd2);
                         case DIFERENTE: return as.dif(opnd1,opnd2);
                         case EQUIVALENTE: return as.eq(opnd1,opnd2);
                         default: return null;
                }
        }

        private E mkexpnot(int op, E opnd1){
                return as.not(opnd1);
        }

  final public S Sp() throws ParseException {S ast;
    ast = S();
    jj_consume_token(0);
{if ("" != null) return ast;}
    throw new Error("Missing return statement in function");
  }

  final public S S() throws ParseException {LDs def; LD2 decs;
    def = LDs();
    jj_consume_token(separador);
    decs = LD2();
{if ("" != null) return new S(def, decs);}
    throw new Error("Missing return statement in function");
  }

  final public LDs LDs() throws ParseException {D d; LDs aOfRLDs;
    d = D();
    aOfRLDs = RLDs(as.defSimple(d));
{if ("" != null) return aOfRLDs;}
    throw new Error("Missing return statement in function");
  }

  final public LDs RLDs(LDs ahOfRLDs0) throws ParseException {D d; LDs aOfRLDs1;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 17:{
      jj_consume_token(17);
      d = D();
      aOfRLDs1 = RLDs(as.defCompuesta(ahOfRLDs0,d));
{if ("" != null) return aOfRLDs1;}
      break;
      }
    default:
      jj_la1[0] = jj_gen;
{if ("" != null) return ahOfRLDs0;}
    }
    throw new Error("Missing return statement in function");
  }

  final public D D() throws ParseException {Token tipo; Token id;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case num:{
      tipo = jj_consume_token(num);
      id = jj_consume_token(identificador);
{if ("" != null) return new D(tipo.image, id.image);}
      break;
      }
    case bool:{
      tipo = jj_consume_token(bool);
      id = jj_consume_token(identificador);
{if ("" != null) return new D(tipo.image, id.image);}
      break;
      }
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public LD2 LD2() throws ParseException {D2 d; LD2 aOfRLD2;
    d = D2();
    aOfRLD2 = RLD2(as.cSimple(d.id(),d.exp()));
{if ("" != null) return aOfRLD2;}
    throw new Error("Missing return statement in function");
  }

  final public LD2 RLD2(LD2 ahOfRLD20) throws ParseException {D2 d; LD2 aOfRLD21;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 17:{
      jj_consume_token(17);
      d = D2();
      aOfRLD21 = RLD2(as.cCompuesta(ahOfRLD20,d.id(),d.exp()));
{if ("" != null) return aOfRLD21;}
      break;
      }
    default:
      jj_la1[2] = jj_gen;
{if ("" != null) return ahOfRLD20;}
    }
    throw new Error("Missing return statement in function");
  }

  final public D2 D2() throws ParseException {Token id; E aOfE0;
    id = jj_consume_token(identificador);
    jj_consume_token(18);
    aOfE0 = E0();
{if ("" != null) return new D2(id.image,aOfE0);}
    throw new Error("Missing return statement in function");
  }

  final public E E0() throws ParseException {E aOfE1,aOfRE0;
    aOfE1 = E1();
    aOfRE0 = RE0(aOfE1);
{if ("" != null) return aOfRE0;}
    throw new Error("Missing return statement in function");
  }

  final public E RE0(E ahOfRE0) throws ParseException {int op0; E aOfE1; E aOfRE0;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 19:
    case 22:{
      op0 = OP0();
      aOfE1 = E1();
      aOfRE0 = RE0(mkexp(op0,ahOfRE0,aOfE1));
{if ("" != null) return aOfRE0;}
      break;
      }
    default:
      jj_la1[3] = jj_gen;
{if ("" != null) return ahOfRE0;}
    }
    throw new Error("Missing return statement in function");
  }

  final public E E1() throws ParseException {E aOfE2, aOfRE1;
    aOfE2 = E2();
    aOfRE1 = RE1(aOfE2);
{if ("" != null) return aOfRE1;}
    throw new Error("Missing return statement in function");
  }

  final public E RE1(E ahOfRE1) throws ParseException {int op1; E aOfE2; E aOfRE1;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case and:{
      op1 = OPAND();
      aOfE2 = E2();
      aOfRE1 = RE1(mkexp(op1,ahOfRE1,aOfE2));
{if ("" != null) return aOfRE1;}
      break;
      }
    case or:{
      op1 = OPOR();
      aOfE2 = E2();
{if ("" != null) return mkexp(op1,ahOfRE1,aOfE2);}
      break;
      }
    default:
      jj_la1[4] = jj_gen;
{if ("" != null) return ahOfRE1;}
    }
    throw new Error("Missing return statement in function");
  }

  final public E E2() throws ParseException {E aOfE3,aOfRE2;
    aOfE3 = E3();
    aOfRE2 = RE2(aOfE3);
{if ("" != null) return aOfRE2;}
    throw new Error("Missing return statement in function");
  }

  final public E RE2(E ahOfRE2) throws ParseException {int op2; E aOfE3;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:{
      op2 = OP2();
      aOfE3 = E3();
{if ("" != null) return mkexp(op2,ahOfRE2,aOfE3);}
      break;
      }
    default:
      jj_la1[5] = jj_gen;
{if ("" != null) return ahOfRE2;}
    }
    throw new Error("Missing return statement in function");
  }

  final public E E3() throws ParseException {E aOfE4, aOfRE3;
    aOfE4 = E4();
    aOfRE3 = RE3(aOfE4);
{if ("" != null) return aOfRE3;}
    throw new Error("Missing return statement in function");
  }

  final public E RE3(E ahOfRE3) throws ParseException {int op3; E aOfE4; E aOfRE3;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 29:
    case 30:{
      op3 = OP3();
      aOfE4 = E4();
      aOfRE3 = RE3(mkexp(op3,ahOfRE3,aOfE4));
{if ("" != null) return aOfRE3;}
      break;
      }
    default:
      jj_la1[6] = jj_gen;
{if ("" != null) return ahOfRE3;}
    }
    throw new Error("Missing return statement in function");
  }

  final public E E4() throws ParseException {E aOfE4, aOfE5; int op4;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case not:{
      op4 = OPNOT();
      aOfE5 = E5();
{if ("" != null) return mkexpnot(op4, aOfE5);}
      break;
      }
    case verdadero:
    case falso:
    case identificador:
    case numeroEntero:
    case numeroReal:
    case 20:{
      aOfE5 = E5();
{if ("" != null) return aOfE5;}
      break;
      }
    case 19:{
      jj_consume_token(19);
      aOfE4 = E4();
{if ("" != null) return aOfE4;}
      break;
      }
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public E E5() throws ParseException {Token t; E aOfE0;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case numeroEntero:{
      t = jj_consume_token(numeroEntero);
{if ("" != null) return as.entero(t.image);}
      break;
      }
    case numeroReal:{
      t = jj_consume_token(numeroReal);
{if ("" != null) return as.real(t.image);}
      break;
      }
    case identificador:{
      t = jj_consume_token(identificador);
{if ("" != null) return as.id(t.image);}
      break;
      }
    case verdadero:{
      t = jj_consume_token(verdadero);
{if ("" != null) return as.boolTrue(t.image);}
      break;
      }
    case falso:{
      t = jj_consume_token(falso);
{if ("" != null) return as.boolFalse(t.image);}
      break;
      }
    case 20:{
      jj_consume_token(20);
      aOfE0 = E0();
      jj_consume_token(21);
{if ("" != null) return aOfE0;}
      break;
      }
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public int OP0() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 22:{
      jj_consume_token(22);
{if ("" != null) return MAS;}
      break;
      }
    case 19:{
      jj_consume_token(19);
{if ("" != null) return MENOS;}
      break;
      }
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public int OPAND() throws ParseException {
    jj_consume_token(and);
{if ("" != null) return AND;}
    throw new Error("Missing return statement in function");
  }

  final public int OPOR() throws ParseException {
    jj_consume_token(or);
{if ("" != null) return OR;}
    throw new Error("Missing return statement in function");
  }

  final public int OP2() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 23:{
      jj_consume_token(23);
{if ("" != null) return MENOR;}
      break;
      }
    case 24:{
      jj_consume_token(24);
{if ("" != null) return MAYOR;}
      break;
      }
    case 25:{
      jj_consume_token(25);
{if ("" != null) return MENORIGUAL;}
      break;
      }
    case 26:{
      jj_consume_token(26);
{if ("" != null) return MAYORIGUAL;}
      break;
      }
    case 27:{
      jj_consume_token(27);
{if ("" != null) return EQUIVALENTE;}
      break;
      }
    case 28:{
      jj_consume_token(28);
{if ("" != null) return DIFERENTE;}
      break;
      }
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public int OP3() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 29:{
      jj_consume_token(29);
{if ("" != null) return POR;}
      break;
      }
    case 30:{
      jj_consume_token(30);
{if ("" != null) return DIV;}
      break;
      }
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public int OPNOT() throws ParseException {
    jj_consume_token(not);
{if ("" != null) return NOT;}
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public ConstructorASTTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[12];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x20000,0x60,0x20000,0x480000,0x600,0x1f800000,0x60000000,0x19c980,0x11c180,0x480000,0x1f800000,0x60000000,};
   }

  /** Constructor with InputStream. */
  public ConstructorAST(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public ConstructorAST(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ConstructorASTTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 12; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 12; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public ConstructorAST(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ConstructorASTTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 12; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 12; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public ConstructorAST(ConstructorASTTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 12; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(ConstructorASTTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 12; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[31];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 12; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 31; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
